using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace CpuGenerator
{
    // TODO Cleanup and finish generator
    partial class Generator
    {
        public Generator()
        {
        }

        public void Generate(TextWriter writer)
        {
            writer.WriteLine("//-------------------------------------------------------------------------------------");
            writer.WriteLine("// This is file was generated by CpuGenerator.");
            writer.WriteLine("// Do not edit this file manually or all your changes will be lost after re-generation.");
            writer.WriteLine("//-------------------------------------------------------------------------------------");
            writer.WriteLine();

            writer.WriteLine("#include \"Processor.h\"");
            writer.WriteLine();

            List<string> opcodes = Properties.Resources.Opcodes.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries).ToList();
            List<string> opcodesCB = Properties.Resources.OpcodesCB.Split(new[] { Environment.NewLine }, StringSplitOptions.RemoveEmptyEntries).ToList();

            if (opcodes.Count != 256 && opcodesCB.Count != 256)
                return;

            writer.WriteLine("void Processor::InitOpcodes()");
            writer.WriteLine("{");

            for (int i = 0; i < 256; i++)
            {
                string line = opcodes.ElementAt(i);

                if ((line != "UNDEFINED") && (line != "CB_OPCODE"))
                    MapOpcodes(writer, i, line);
                else
                    MapInvalid(writer, i, line);
            }

            writer.WriteLine();
            writer.WriteLine("\t// CB Obcodes");

            for (int i = 0; i < 256; i++)
            {
                string line = opcodesCB.ElementAt(i);

                MapCBOpcodes(writer, i, line);
            }

            writer.WriteLine("}");
            writer.WriteLine();

            for (int i = 0; i < 256; i++)
            {
                string line = opcodes.ElementAt(i);

                if ((line != "UNDEFINED") && (line != "CB_OPCODE"))
                    GenerateMethod(writer, i, line);
            }

            writer.WriteLine("// CB Obcodes");
            writer.WriteLine();

            for (int i = 0; i < 256; i++)
            {
                string line = opcodesCB.ElementAt(i);

                GenerateMethod(writer, i, line);
            }
        }

        public void GenerateMethod(TextWriter writer, int op, string line)
        {
            Opcode opcode;
            ParseOpcode(line, out opcode);

            writer.WriteLine("/* {0} */", line.Replace(",", ", "));
            writer.WriteLine("void Processor::{0}() // 0x{1:X2}", opcode.ToFunctionName(), op);
            writer.WriteLine("{");

            WriteOpcodeStub(writer, opcode);

            writer.WriteLine("}");
            writer.WriteLine();
        }

        public void ParseOpcode(string opString, out Opcode opcode)
        {
            var instr = opString.Split(' ', ',');
            var instrLength = instr.Length;

            opcode = new Opcode();
            opcode.Operation = instr[0];
            opcode.NumberOfOperands = instrLength - 1;

            if (opcode.NumberOfOperands == 1)
            {
                opcode.FirstOperand = instr[1];
                opcode.SecondOperand = string.Empty;
            }
            else if (opcode.NumberOfOperands == 2)
            {
                opcode.FirstOperand = instr[1];
                opcode.SecondOperand = instr[2];
            }
        }

        private void WriteOpcodeStub(TextWriter writer, Opcode opcode)
        {
            string operation = opcode.Operation;
            string firstOperand = opcode.FirstOperand;
            string secondOperand = opcode.SecondOperand;

            string first = GetStoreStub(firstOperand);
            string second = GetLoadStub(secondOperand);

            switch (operation)
            {
                case "NOP":
                    break;
                case "STOP":
                    writer.WriteLine("\tPC++;");
                    break;
                case "LD":
                    if (firstOperand != secondOperand)
                    {
                        if (firstOperand == "HL" && secondOperand == "SP+n")
                        {
                            WriteHLSPN(writer, opcode);
                        }
                        else
                        {
                            if (firstOperand == "(nn)" && secondOperand == "A")
                                writer.WriteLine("\tmemory->WriteByte(memory->ReadWord(PC), A);");
                            else
                                writer.WriteLine("\t" + string.Format(first, second));

                            if (secondOperand == "nn" || secondOperand == "(nn)" || firstOperand == "(nn)")
                                writer.WriteLine("\tPC += 2;");
                        }
                    }
                    break;
                case "INC":
                    if (firstOperand == "BC" || firstOperand == "DE" || firstOperand == "HL" || firstOperand == "SP")
                        WriteIncWord(writer, opcode);
                    else
                        WriteIncByte(writer, opcode);
                    break;
                case "DEC":
                    if (firstOperand == "BC" || firstOperand == "DE" || firstOperand == "HL" || firstOperand == "SP")
                        WriteDecWord(writer, opcode);
                    else
                        WriteDecByte(writer, opcode);
                    break;
                case "AND":
                    WriteAnd(writer, opcode);
                    break;
                case "OR":
                    WriteOr(writer, opcode);
                    break;
                case "XOR":
                    WriteXor(writer, opcode);
                    break;
                case "ADD":
                    if (firstOperand == "HL" || firstOperand == "SP")
                        WriteAddWord(writer, opcode);
                    else
                        WriteAdd(writer, opcode);
                    break;
                case "ADC":
                    WriteAdc(writer, opcode);
                    break;
                case "SUB":
                    WriteSub(writer, opcode);
                    break;
                case "SBC":
                    WriteSbc(writer, opcode);
                    break;
                case "DI":
                    WriteDi(writer, opcode);
                    break;
                case "EI":
                    WriteEi(writer, opcode);
                    break;
                case "BIT":
                    WriteBit(writer, opcode);
                    break;
                case "SET":
                    if (secondOperand != "(HL)")
                        WriteSet(writer, opcode);
                    else
                        WriteHLSet(writer, opcode);
                    break;
                case "RES":
                    if (secondOperand != "(HL)")
                        WriteRes(writer, opcode);
                    else
                        WriteHLRes(writer, opcode);
                        break;
                case "CALL":
                        WriteCall(writer, opcode);
                        break;
                case "RET":
                        WriteRet(writer, opcode);
                        break;
                case "RETI":
                        WriteReti(writer, opcode);
                        break;
                case "PUSH":
                        WritePush(writer, opcode);
                        break;
                case "POP":
                        WritePop(writer, opcode);
                        break;
                case "JR":
                        WriteJr(writer, opcode);
                        break;
                case "JP":
                        if (firstOperand == "(HL)")
                            writer.WriteLine("\tPC = HL;");
                        else
                            WriteJp(writer, opcode);
                        break;
                case "DAA":
                        WriteDaa(writer, opcode);
                        break;
                case "CPL":
                        WriteCpl(writer, opcode);
                        break;
                case "CCF":
                        WriteCcf(writer, opcode);
                        break;
                case "SCF":
                        WriteScf(writer, opcode);
                        break;
                case "CP":
                        WriteCp(writer, opcode);
                        break;
                case "HALT":
                        WriteHalt(writer, opcode);
                        break;
                case "RST":
                        WriteRst(writer, opcode);
                        break;
                case "SWAP":
                        if (firstOperand != "(HL)")
                            WriteSwap(writer, opcode);
                        else
                            WriteSwapHL(writer, opcode);
                        break;
                case "RL":
                        WriteRl(writer, opcode);
                        break;
                case "RLC":
                        WriteRlc(writer, opcode);
                        break;
                case "RR":
                        WriteRr(writer, opcode);
                        break;
                case "RRC":
                        WriteRrc(writer, opcode);
                        break;
                case "RLA":
                        WriteRl(writer, opcode, true);
                        break;
                case "RLCA":
                        WriteRlc(writer, opcode, true);
                        break;
                case "RRA":
                        WriteRr(writer, opcode, true);
                        break;
                case "RRCA":
                        WriteRrc(writer, opcode, true);
                        break;
                case "SLA":
                        WriteSla(writer, opcode, true);
                        break;
                case "SRA":
                        WriteSra(writer, opcode, true);
                        break;
                case "SRL":
                        WriteSrl(writer, opcode, true);
                        break;
                default:
                    writer.WriteLine("\t// Not implemented yet");
                    writer.WriteLine("\tUnknownOpcode();");
                    break;
            }
        }

        public void MapOpcodes(TextWriter writer, int op, string line)
        {
            Opcode opcode;
            ParseOpcode(line, out opcode);

            var funcName = opcode.ToFunctionName();

            writer.WriteLine("\topcodes[0x{0:X2}] = std::bind(&Processor::{1}, this);", op, funcName);
        }

        public void MapInvalid(TextWriter writer, int op, string line)
        {
            writer.WriteLine("\topcodes[0x{0:X2}] = std::bind(&Processor::InvalidOpcode, this);", op);
        }

        public void MapCBOpcodes(TextWriter writer, int op, string line)
        {
            Opcode opcode;
            ParseOpcode(line, out opcode);

            var funcName = opcode.ToFunctionName();

            writer.WriteLine("\topcodesCB[0x{0:X2}] = std::bind(&Processor::{1}, this);", op, funcName);
        }
    }
}
